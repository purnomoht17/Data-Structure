Kelompok 5
Anggota :
    Heru Purnomo    (535230031)
    Jessen Ericko   (535230006)
    Ahmad Dicky     (535230101)

NOMOR 1

class DataItem {
   public long dData;

   public DataItem(long dd) {
      dData = dd;
   }

   public void displayItem() {
      System.out.print("/" + dData);
   }
}

class Node {
   private static final int ORDER = 4;
   private int numItems;
   private Node parent;
   private Node childArray[] = new Node[ORDER];
   private DataItem itemArray[] = new DataItem[ORDER - 1];

   public void connectChild(int childNum, Node child) {
      childArray[childNum] = child;
      if (child != null)
         child.parent = this;
   }

   public Node disconnectChild(int childNum) {
      Node tempNode = childArray[childNum];
      childArray[childNum] = null;
      return tempNode;
   }

   public Node getChild(int childNum) {
      return childArray[childNum];
   }

   public Node getParent() {
      return parent;
   }

   public boolean isLeaf() {
      return (childArray[0] == null) ? true : false;
   }

   public int getNumItems() {
      return numItems;
   }

   public DataItem getItem(int index) {
      return itemArray[index];
   }

   public boolean isFull() {
      return (numItems == ORDER - 1) ? true : false;
   }

   public int findItem(long key) {
      for (int j = 0; j < ORDER - 1; j++) {
         if (itemArray[j] == null)
            break;
         else if (itemArray[j].dData == key)
            return j;
      }
      return -1;
   }

   public int insertItem(DataItem newItem) {
      numItems++;
      long newKey = newItem.dData;

      for (int j = ORDER - 2; j >= 0; j--) {
         if (itemArray[j] == null)
            continue;
         else {
            long itsKey = itemArray[j].dData;
            if (newKey < itsKey)
               itemArray[j + 1] = itemArray[j];
            else {
               itemArray[j + 1] = newItem;
               return j + 1;
            }
         }
      }
      itemArray[0] = newItem;
      return 0;
   }

   public DataItem removeItem() {
      DataItem temp = itemArray[numItems - 1];
      itemArray[numItems - 1] = null;
      numItems--;
      return temp;
   }

   public void removeItemByKey(long key) {
      for (int i = 0; i < numItems; i++) {
         if (itemArray[i].dData == key) {
            for (int j = i; j < numItems - 1; j++) {
               itemArray[j] = itemArray[j + 1];
            }
            itemArray[numItems - 1] = null;
            numItems--;
            break;
         }
      }
   }

   public void displayNode() {
      for (int j = 0; j < numItems; j++)
         itemArray[j].displayItem();
      System.out.println("/");
   }
}

class Tree23 {
   private Node root = new Node();

   public int find(long key) {
      Node curNode = root;
      int childNumber;
      while (true) {
         if ((childNumber = curNode.findItem(key)) != -1)
            return childNumber;
         else if (curNode.isLeaf())
            return -1;
         else
            curNode = getNextChild(curNode, key);
      }
   }

   public void insert(long dValue) {
      Node curNode = root;
      DataItem tempItem = new DataItem(dValue);

      while (true) {
         if (curNode.isLeaf())
            break;
         else
            curNode = getNextChild(curNode, dValue);
      }
      curNode.insertItem(tempItem);
      if (curNode.isFull()) {
         split(curNode); // split it
         curNode = curNode.getParent();
         while (curNode.isFull()) {
            split(curNode); // split it
            curNode = curNode.getParent();
         }
      }
   }

   //menambahkan fungsi delete
   public void delete(long key) {
      recDelete(root, key);
      if (root.getNumItems() == 0) {
         if (!root.isLeaf())
            root = root.getChild(0);
      }
   }

   private void recDelete(Node thisNode, long key) {
      if (thisNode == null) {
         return;
      }
      int childIndex = thisNode.findItem(key);
      if (childIndex != -1) {
         if (thisNode.isLeaf()) {
            thisNode.removeItemByKey(key);
            return;
         } else {
            Node predOrSucc = thisNode.getChild(childIndex);
            while (!predOrSucc.isLeaf()) {
               predOrSucc = predOrSucc.getChild(predOrSucc.getNumItems());
            }
            DataItem replacement = predOrSucc.getItem(predOrSucc.getNumItems() - 1);
            thisNode.removeItemByKey(key);
            thisNode.insertItem(replacement);
            recDelete(predOrSucc, replacement.dData);
         }
      } else {
         if (thisNode.isLeaf()) {
            return;
         } else {
            Node nextNode = getNextChild(thisNode, key);
            recDelete(nextNode, key);
         }
      }
   }

   private Node getNextChild(Node theNode, long theValue) {
      int j;

      int numItems = theNode.getNumItems();
      for (j = 0; j < numItems; j++) {
         if (theValue < theNode.getItem(j).dData)
            return theNode.getChild(j);
      }
      return theNode.getChild(j);
   }

   public void split(Node thisNode) {
      DataItem itemB, itemC;
      Node parent, child2, child3;
      int itemIndex;

      itemC = thisNode.removeItem();
      itemB = thisNode.removeItem();
      child2 = thisNode.disconnectChild(2);
      child3 = thisNode.disconnectChild(3);

      Node newRight = new Node();

      if (thisNode == root) {
         root = new Node();
         parent = root;
         root.connectChild(0, thisNode);
      } else
         parent = thisNode.getParent();

      itemIndex = parent.insertItem(itemB);
      int n = parent.getNumItems();

      for (int j = n - 1; j > itemIndex; j--) {
         Node temp = parent.disconnectChild(j);
         parent.connectChild(j + 1, temp);
      }
      parent.connectChild(itemIndex + 1, newRight);
      newRight.insertItem(itemC);
      newRight.connectChild(0, child2);
      newRight.connectChild(1, child3);
   }

   public void displayTree() {
      recDisplayTree(root, 0, 0);
   }

   private void recDisplayTree(Node thisNode, int level, int childNumber) {
      System.out.print("level=" + level + " child=" + childNumber + " ");
      thisNode.displayNode();

      int numItems = thisNode.getNumItems();
      for (int j = 0; j < numItems + 1; j++) {
         Node nextNode = thisNode.getChild(j);
         if (nextNode != null)
            recDisplayTree(nextNode, level + 1, j);
         else
            return;
      }
   }
}

public class Tree23Main {
   public static void main(String[] args) {
      Tree23 theTree = new Tree23();

      theTree.insert(42);
      theTree.insert(22);
      theTree.insert(58);
      theTree.insert(12);
      theTree.insert(51);
      theTree.insert(15);
      theTree.insert(30);
      theTree.insert(71);
      theTree.insert(8);
      theTree.insert(23);
      theTree.insert(77);
      theTree.insert(2);
      theTree.insert(80);
      theTree.insert(3);
      theTree.insert(10);
      theTree.insert(17);
      theTree.insert(5);
      theTree.insert(62);
      theTree.insert(9);
      theTree.insert(55);
      theTree.insert(88);
      theTree.displayTree();

      int keyToFind = 40;
      int found = theTree.find(keyToFind);
      if (found != -1)
         System.out.println(keyToFind + " ditemukan di tree \n");
      else
         System.out.println(keyToFind + " tidak ditemukan di tree \n");

      int keyToDelete = 88;
      theTree.delete(keyToDelete);
      System.out.println("Setelah penghapusan " + keyToDelete);
      theTree.displayTree();
   }
}

Input Soal Latihan 1
Insert : 42, 22, 58, 12, 51, 15, 30, 71, 8,23, 77, 2, 80, 3, 10, 17,5,62, 9, 55, 88
Search : 40, 58
Delete : 23

output
Insert :                    |   Search  :                       |   Delete :
                            |   40 tidak ditemukan di tree      |   Setelah penghapusan 23
level=0 child=0 /15/        |   58 ditemukan di tree            |   level=0 child=0 /15/
level=1 child=0 /8/         |                                   |   level=1 child=0 /8/
level=2 child=0 /3/         |                                   |   level=2 child=0 /3/
level=3 child=0 /2/         |                                   |   level=3 child=0 /2/
level=3 child=1 /5/         |                                   |   level=3 child=1 /5/
level=2 child=1 /10/        |                                   |   level=2 child=1 /10/
level=3 child=0 /9/         |                                   |   level=3 child=0 /9/
level=3 child=1 /12/        |                                   |   level=3 child=1 /12/
level=1 child=1 /42/        |                                   |   level=1 child=1 /42/
level=2 child=0 /23/        |                                   |   level=2 child=0 /22/
level=3 child=0 /17/22/     |                                   |   level=3 child=0 /17/
level=3 child=1 /30/        |                                   |   level=3 child=1 /30/
level=2 child=1 /58/77/     |                                   |   level=2 child=1 /58/77/
level=3 child=0 /51/55/     |                                   |   level=3 child=0 /51/55/
level=3 child=1 /62/71/     |                                   |   level=3 child=1 /62/71/
level=3 child=2 /80/88/     |                                   |   level=3 child=2 /80/88/

NOMOR 2

class DataItem<V> {
   public V value;

   public DataItem(V value) {
      this.value = value;
   }

   public void displayItem() {
      System.out.print("/" + value);
   }
}

class Node<V> {
   private static final int ORDER = 4;
   private int numItems;
   private Node<V> parent;
   private Node<V>[] childArray = new Node[ORDER];
   private DataItem<V>[] itemArray = new DataItem[ORDER - 1];

   public void connectChild(int childNum, Node<V> child) {
      childArray[childNum] = child;
      if (child != null)
         child.parent = this;
   }

   public Node<V> disconnectChild(int childNum) {
      Node<V> tempNode = childArray[childNum];
      childArray[childNum] = null;
      return tempNode;
   }

   public Node<V> getChild(int childNum) {
      return childArray[childNum];
   }

   public Node<V> getParent() {
      return parent;
   }

   public boolean isLeaf() {
      return childArray[0] == null;
   }

   public int getNumItems() {
      return numItems;
   }

   public DataItem<V> getItem(int index) {
      return itemArray[index];
   }

   public boolean isFull() {
      return numItems == ORDER - 1;
   }

   public int findItem(V value) {
      for (int j = 0; j < ORDER - 1; j++) {
         if (itemArray[j] == null)
            break;
         else if (itemArray[j].value.equals(value))
            return j;
      }
      return -1;
   }

   public int insertItem(DataItem<V> newItem) {
      numItems++;
      V newValue = newItem.value;

      for (int j = ORDER - 2; j >= 0; j--) {
         if (itemArray[j] == null)
            continue;
         else {
            V itsValue = itemArray[j].value;
            if (newValue.toString().compareTo(itsValue.toString()) < 0)
               itemArray[j + 1] = itemArray[j];
            else {
               itemArray[j + 1] = newItem;
               return j + 1;
            }
         }
      }
      itemArray[0] = newItem;
      return 0;
   }

   public DataItem<V> removeItem() {
      DataItem<V> temp = itemArray[numItems - 1];
      itemArray[numItems - 1] = null;
      numItems--;
      return temp;
   }

   public void removeItemByKey(V value) {
      for (int i = 0; i < numItems; i++) {
         if (itemArray[i].value.equals(value)) {
            for (int j = i; j < numItems - 1; j++) {
               itemArray[j] = itemArray[j + 1];
            }
            itemArray[numItems - 1] = null;
            numItems--;
            break;
         }
      }
   }

   public void displayNode() {
      for (int j = 0; j < numItems; j++)
         itemArray[j].displayItem();
      System.out.println("/");
   }
}

class Tree23<V> {
   private Node<V> root = new Node<>();

   public int find(V value) {
      Node<V> curNode = root;
      int childNumber;
      while (true) {
         if ((childNumber = curNode.findItem(value)) != -1)
            return childNumber;
         else if (curNode.isLeaf())
            return -1;
         else
            curNode = getNextChild(curNode, value);
      }
   }

   public void insert(V value) {
      Node<V> curNode = root;
      DataItem<V> tempItem = new DataItem<>(value);

      while (true) {
         if (curNode.isLeaf())
            break;
         else
            curNode = getNextChild(curNode, value);
      }
      curNode.insertItem(tempItem);
      if (curNode.isFull()) {
         split(curNode);
         curNode = curNode.getParent();
         while (curNode.isFull()) {
            split(curNode);
            curNode = curNode.getParent();
         }
      }
   }

   public void delete(V value) {
      recDelete(root, value);
      if (root.getNumItems() == 0) {
         if (!root.isLeaf())
            root = root.getChild(0);
      }
   }

   private void recDelete(Node<V> thisNode, V value) {
      if (thisNode == null) {
         return;
      }
      int childIndex = thisNode.findItem(value);
      if (childIndex != -1) {
         if (thisNode.isLeaf()) {
            thisNode.removeItemByKey(value);
            return;
         } else {
            Node<V> predOrSucc = thisNode.getChild(childIndex);
            while (!predOrSucc.isLeaf()) {
               predOrSucc = predOrSucc.getChild(predOrSucc.getNumItems());
            }
            DataItem<V> replacement = predOrSucc.getItem(predOrSucc.getNumItems() - 1);
            thisNode.removeItemByKey(value);
            thisNode.insertItem(replacement);
            recDelete(predOrSucc, replacement.value);
         }
      } else {
         if (thisNode.isLeaf()) {
            return;
         } else {
            Node<V> nextNode = getNextChild(thisNode, value);
            recDelete(nextNode, value);
         }
      }
   }

   private Node<V> getNextChild(Node<V> theNode, V value) {
      int j;

      int numItems = theNode.getNumItems();
      for (j = 0; j < numItems; j++) {
         if (value.toString().compareTo(theNode.getItem(j).value.toString()) < 0)
            return theNode.getChild(j);
      }
      return theNode.getChild(j);
   }

   public void split(Node<V> thisNode) {
      DataItem<V> itemB, itemC;
      Node<V> parent, child2, child3;
      int itemIndex;

      itemC = thisNode.removeItem();
      itemB = thisNode.removeItem();
      child2 = thisNode.disconnectChild(2);
      child3 = thisNode.disconnectChild(3);

      Node<V> newRight = new Node<>();

      if (thisNode == root) {
         root = new Node<>();
         parent = root;
         root.connectChild(0, thisNode);
      } else
         parent = thisNode.getParent();

      itemIndex = parent.insertItem(itemB);
      int n = parent.getNumItems();

      for (int j = n - 1; j > itemIndex; j--) {
         Node<V> temp = parent.disconnectChild(j);
         parent.connectChild(j + 1, temp);
      }
      parent.connectChild(itemIndex + 1, newRight);
      newRight.insertItem(itemC);
      newRight.connectChild(0, child2);
      newRight.connectChild(1, child3);
   }

   public void displayTree() {
      recDisplayTree(root, 0, 0);
   }

   private void recDisplayTree(Node<V> thisNode, int level, int childNumber) {
      System.out.print("level=" + level + " child=" + childNumber + " ");
      thisNode.displayNode();

      int numItems = thisNode.getNumItems();
      for (int j = 0; j < numItems + 1; j++) {
         Node<V> nextNode = thisNode.getChild(j);
         if (nextNode != null)
            recDisplayTree(nextNode, level + 1, j);
         else
            return;
      }
   }
}

public class Tree23Main {
   public static void main(String[] args) {
      Tree23<Comparable<?>> theTree = new Tree23<>();

      theTree.insert("A");
      theTree.insert("B");
      theTree.insert("C");
      theTree.insert("D");
      theTree.insert("E");
      theTree.insert("F");
      theTree.insert("G");
      theTree.insert("H");
      theTree.insert("I");
      theTree.insert("J");
      theTree.insert(77);
      theTree.insert(2);
      theTree.insert(80);
      theTree.insert(3);
      theTree.insert(10);
      theTree.insert(17);
      theTree.insert(5);
      theTree.insert(62);
      theTree.insert(9);
      theTree.insert(55);
      theTree.insert(88);
      theTree.displayTree();

      Comparable<?> valueToFind = "B";
      int found = theTree.find(valueToFind);
      if (found != -1)
         System.out.println(valueToFind + " ditemukan di tree \n");
      else
         System.out.println(valueToFind + " tidak ditemukan di tree \n");

      Comparable<?> valueToDelete = 42;
      theTree.delete(valueToDelete);
      System.out.println("Setelah penghapusan " + valueToDelete);
      theTree.displayTree();
   }
}

Input

Insert : A, B ,C ,D, E, F, G, H, I, J, 77, 2, 80, 3, 10, 17,5,62, 9, 55, 88
Search : B, Z, 17, 22
Delete : 77, E

Output

Insert :                    |   Search :                        |
                            |                                   |
level=0 child=0 /77/D/      |   B ditemukan di tree             |
level=1 child=0 /2/5/       |   Z tidak ditemukan di tree       |
level=2 child=0 /10/17/     |   17 ditemukan di tree            |
level=2 child=1 /3/         |   22 tidak ditemukan di tree      |
level=2 child=2 /55/62/     |                                   |
level=1 child=1 /9/B/       |                                   |
level=2 child=0 /80/88/     |                                   |
level=2 child=1 /A/         |                                   |
level=2 child=2 /C/         |                                   |
level=1 child=2 /F/H/       |                                   |
level=2 child=0 /E/         |                                   |
level=2 child=1 /G/         |                                   |
level=2 child=2 /I/J/       |                                   |


Delete 77                   |   Delete E
                            |
Setelah penghapusan 77      |   Setelah penghapusan E
level=0 child=0 /62/D/      |   level=0 child=0 /77/D/
level=1 child=0 /2/5/       |   level=1 child=0 /2/5/
level=2 child=0 /10/17/     |   level=2 child=0 /10/17/
level=2 child=1 /3/         |   level=2 child=1 /3/
level=2 child=2 /55/        |   level=2 child=2 /55/62/
level=1 child=1 /9/B/       |   level=1 child=1 /9/B/
level=2 child=0 /80/88/     |   level=2 child=0 /80/88/
level=2 child=1 /A/         |   level=2 child=1 /A/
level=2 child=2 /C/         |   level=2 child=2 /C/
level=1 child=2 /F/H/       |   level=1 child=2 /F/H/
level=2 child=0 /E/         |   level=2 child=0 /
level=2 child=1 /G/         |   level=2 child=1 /G/
level=2 child=2 /I/J/       |   level=2 child=2 /I/J/















